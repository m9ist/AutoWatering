#include <TimeLib.h> // Timelib in library manager

#define IS_DEBUG true

struct Plant {
  String plantName;
  int sensorPin;
  int valvePin;
  // сколько в попугаях влажности 1 .. 10, 11 - отключен, 12 - поливается
  int parrots;

  // последняя проверка датчика, при обновлении обнулять проверку
  time_t lastCheck;
  // после поливки надо бы сделать почаще проверку?? поливать мелкими порциями чтобы не залить?
  // как часто поливать, принудительная поливка?
  // при каком пороге влажности поливать
  // сколько схавал воды
  // сколько поливать воды, размер горшка?
};

struct State {
  Plant plants[8];
};


void setup() {
  initLogging(26); // sd pin
  writeln("Hellow world!");
  
  if (IS_DEBUG) {
    initScreen();
  }
}

void loop() {
  // отладочный блок
  if (IS_DEBUG) {
    loopScreen();
    return;
  }



  // главная мысль, если нужно выполнить команду, сразу ее сделать, а потом запустить алгоритм заново
  // сначала нужно вытащить команду от Алисы и выполнить ее
  // потом проверить стейт
  // потом поливать
  // потом послать данные Алисе
  // потом уже синхронизация времени
  int some = getSecret();

  writeln("--->>> start main cycle");

  if (checkAlisa()) {
    return;
  }

  // проверить надо ли обновлять стейт, сделать обновление

  // нарисовать экран по изменению стейта

  // послать оповещения пользователям
  // послать стейт алисе

  // учесть резкие изменения стейта?
  // пройтись по стейту - нужно ли поливать, сделать поливку
  // сначала обновить стейт, полить, обновить стейт

  // слушаем кнопку принудительного полива - короткое нажание - проверка, длительное - поливка алгоритмом через пик, длинная задержка - принудительная проливка

  // получаем команду от алисы (с фильтрацией дублей) - отображение на экране ---busy---, отослать статус "начали выполнять" и "выполнили"
}

void waterPlant(Plant plant) {

}

bool checkAlisa() {

}